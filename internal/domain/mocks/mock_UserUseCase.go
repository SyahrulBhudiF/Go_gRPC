// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/SyahrulBhudiF/Go_gRPC/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockUserUseCase is an autogenerated mock type for the UserUseCase type
type MockUserUseCase struct {
	mock.Mock
}

type MockUserUseCase_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserUseCase) EXPECT() *MockUserUseCase_Expecter {
	return &MockUserUseCase_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: name, email
func (_m *MockUserUseCase) Create(name string, email string) (*domain.User, error) {
	ret := _m.Called(name, email)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.User, error)); ok {
		return rf(name, email)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.User); ok {
		r0 = rf(name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUseCase_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockUserUseCase_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
//   - email string
func (_e *MockUserUseCase_Expecter) Create(name interface{}, email interface{}) *MockUserUseCase_Create_Call {
	return &MockUserUseCase_Create_Call{Call: _e.mock.On("Create", name, email)}
}

func (_c *MockUserUseCase_Create_Call) Run(run func(name string, email string)) *MockUserUseCase_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockUserUseCase_Create_Call) Return(_a0 *domain.User, _a1 error) *MockUserUseCase_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUseCase_Create_Call) RunAndReturn(run func(string, string) (*domain.User, error)) *MockUserUseCase_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *MockUserUseCase) Delete(id int64) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserUseCase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockUserUseCase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id int64
func (_e *MockUserUseCase_Expecter) Delete(id interface{}) *MockUserUseCase_Delete_Call {
	return &MockUserUseCase_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MockUserUseCase_Delete_Call) Run(run func(id int64)) *MockUserUseCase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockUserUseCase_Delete_Call) Return(_a0 error) *MockUserUseCase_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserUseCase_Delete_Call) RunAndReturn(run func(int64) error) *MockUserUseCase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *MockUserUseCase) GetByID(id int64) (*domain.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*domain.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *domain.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUseCase_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserUseCase_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id int64
func (_e *MockUserUseCase_Expecter) GetByID(id interface{}) *MockUserUseCase_GetByID_Call {
	return &MockUserUseCase_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *MockUserUseCase_GetByID_Call) Run(run func(id int64)) *MockUserUseCase_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockUserUseCase_GetByID_Call) Return(_a0 *domain.User, _a1 error) *MockUserUseCase_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUseCase_GetByID_Call) RunAndReturn(run func(int64) (*domain.User, error)) *MockUserUseCase_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, name, email
func (_m *MockUserUseCase) Update(id int64, name string, email string) (*domain.User, error) {
	ret := _m.Called(id, name, email)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string, string) (*domain.User, error)); ok {
		return rf(id, name, email)
	}
	if rf, ok := ret.Get(0).(func(int64, string, string) *domain.User); ok {
		r0 = rf(id, name, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, string, string) error); ok {
		r1 = rf(id, name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserUseCase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockUserUseCase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id int64
//   - name string
//   - email string
func (_e *MockUserUseCase_Expecter) Update(id interface{}, name interface{}, email interface{}) *MockUserUseCase_Update_Call {
	return &MockUserUseCase_Update_Call{Call: _e.mock.On("Update", id, name, email)}
}

func (_c *MockUserUseCase_Update_Call) Run(run func(id int64, name string, email string)) *MockUserUseCase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserUseCase_Update_Call) Return(_a0 *domain.User, _a1 error) *MockUserUseCase_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserUseCase_Update_Call) RunAndReturn(run func(int64, string, string) (*domain.User, error)) *MockUserUseCase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserUseCase creates a new instance of MockUserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserUseCase(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserUseCase {
	mock := &MockUserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
